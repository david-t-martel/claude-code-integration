name: Release Automation

on:
  push:
    tags: 
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      prerelease:
        description: 'Create prerelease'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # Job 1: Version and Tag Creation (manual trigger only)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    
    outputs:
      new_tag: ${{ steps.version.outputs.new_tag }}
      release_created: ${{ steps.version.outputs.release_created }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create tag
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version based on input
          case "${{ github.event.inputs.version_type }}" in
            "major")
              pnpm version major --no-git-tag-version
              ;;
            "minor")
              pnpm version minor --no-git-tag-version
              ;;
            "patch")
              pnpm version patch --no-git-tag-version
              ;;
            "prerelease")
              pnpm version prerelease --preid=rc --no-git-tag-version
              ;;
          esac
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Create tag
          NEW_TAG="v$NEW_VERSION"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT
          
          # Commit version bump
          git add package.json packages/*/package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag "$NEW_TAG"
          
          # Push changes
          git push origin main
          git push origin "$NEW_TAG"

  # Job 2: Build Release Assets
  build-release:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: linux-x64
          - os: windows-latest
            target: win32-x64
          - os: macos-latest
            target: darwin-x64

    # Run on tag push OR after create-release job
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name == 'workflow_dispatch' && needs.create-release.outputs.release_created == 'true')
    
    needs: [create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Rust
        if: runner.os != 'Windows'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Setup Rust (Windows)
        if: runner.os == 'Windows'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-msvc
          override: true
          components: rustfmt, clippy

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Build Rust components
        shell: bash
        run: |
          if [ -f "packages/command-replacer/Cargo.toml" ]; then
            cd packages/command-replacer
            cargo build --release --target-dir ../../target
            cd ../..
          fi

      - name: Create platform-specific package
        shell: bash
        run: |
          # Create release directory
          mkdir -p release/claude-code-integration-${{ matrix.target }}
          
          # Copy built packages
          cp -r packages/*/dist release/claude-code-integration-${{ matrix.target }}/packages/
          cp -r packages/*/lib release/claude-code-integration-${{ matrix.target }}/packages/ 2>/dev/null || true
          
          # Copy configurations
          cp -r configs release/claude-code-integration-${{ matrix.target }}/
          cp -r agents release/claude-code-integration-${{ matrix.target }}/
          cp -r commands release/claude-code-integration-${{ matrix.target }}/
          cp -r docs release/claude-code-integration-${{ matrix.target }}/
          cp -r scripts release/claude-code-integration-${{ matrix.target }}/
          
          # Copy root files
          cp package.json release/claude-code-integration-${{ matrix.target }}/
          cp README.md release/claude-code-integration-${{ matrix.target }}/
          cp MIGRATION_SUMMARY.md release/claude-code-integration-${{ matrix.target }}/
          
          # Copy Rust binaries if they exist
          if [ -f "target/release/command-replacer" ]; then
            mkdir -p release/claude-code-integration-${{ matrix.target }}/bin
            cp target/release/command-replacer release/claude-code-integration-${{ matrix.target }}/bin/
          fi
          if [ -f "target/release/command-replacer.exe" ]; then
            mkdir -p release/claude-code-integration-${{ matrix.target }}/bin
            cp target/release/command-replacer.exe release/claude-code-integration-${{ matrix.target }}/bin/
          fi

      - name: Create tarball (Unix)
        if: runner.os != 'Windows'
        run: |
          cd release
          tar -czf claude-code-integration-${{ matrix.target }}.tar.gz claude-code-integration-${{ matrix.target }}

      - name: Create ZIP (Windows)
        if: runner.os == 'Windows'
        run: |
          cd release
          Compress-Archive -Path claude-code-integration-${{ matrix.target }} -DestinationPath claude-code-integration-${{ matrix.target }}.zip

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: claude-code-integration-${{ matrix.target }}
          path: |
            release/*.tar.gz
            release/*.zip
          retention-days: 90

  # Job 3: Create GitHub Release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build-release]
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name == 'workflow_dispatch' && needs.create-release.outputs.release_created == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${{ needs.create-release.outputs.new_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "Generating release notes from $PREV_TAG to ${{ steps.tag.outputs.tag_name }}"
            
            # Generate changelog
            CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
            
            cat << EOF > release-notes.md
          ## What's Changed
          
          $CHANGELOG
          
          ## Installation
          
          ### Quick Install
          \`\`\`bash
          # Download and extract the appropriate package for your platform
          # Linux/macOS
          curl -L https://github.com/david-t-martel/claude-code-integration/releases/download/${{ steps.tag.outputs.tag_name }}/claude-code-integration-linux-x64.tar.gz | tar -xz
          
          # Windows
          # Download claude-code-integration-win32-x64.zip and extract
          \`\`\`
          
          ### Using npm/pnpm
          \`\`\`bash
          npm install -g claude-code-integration@${{ steps.tag.outputs.tag_name }}
          # or
          pnpm add -g claude-code-integration@${{ steps.tag.outputs.tag_name }}
          \`\`\`
          
          ## Features in this Release
          
          - ✅ Complete CI/CD pipeline with automated testing
          - ✅ Cross-platform builds (Linux, Windows, macOS)
          - ✅ Comprehensive security scanning
          - ✅ Automated dependency updates
          - ✅ Performance benchmarking
          - ✅ Multi-architecture support
          
          ## Breaking Changes
          
          None in this release.
          
          ## Upgrade Guide
          
          1. Download the new version
          2. Replace your existing installation
          3. Run \`pnpm install\` to update dependencies
          4. Update your configuration if needed
          
          **Full Changelog**: https://github.com/david-t-martel/claude-code-integration/compare/$PREV_TAG...${{ steps.tag.outputs.tag_name }}
          EOF
          else
            echo "## Initial Release
          
          This is the first release of Claude Code Integration Tools!
          
          ## Features
          
          - 🪝 Smart Hooks System - Pre/post tool execution hooks with validation
          - 🤖 Specialized Agents - 50+ specialized AI agents for different tasks  
          - 🔧 Windows Tools - Native Windows command execution and path handling
          - 🌐 MCP Server Integration - Model Context Protocol server configurations
          - 🔄 Cross-Platform Support - Seamless Windows-WSL integration
          - 📝 Custom Commands - Extensible command system
          - 🚀 Performance Optimized - Fast execution with caching and lazy loading" > release-notes.md
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "*.zip" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.tag_name }}
          name: Release ${{ steps.tag.outputs.tag_name }}
          bodyFile: release-notes.md
          artifacts: "release-assets/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generateReleaseNotes: true
          makeLatest: ${{ github.event.inputs.prerelease != 'true' }}

  # Job 4: Publish to NPM (optional, for public packages)
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [github-release]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) &&
      !contains(github.ref, 'rc') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Publish to NPM (dry run first)
        run: |
          echo "Running dry run publication..."
          pnpm publish --dry-run --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Uncomment below to enable actual NPM publishing
      # - name: Publish to NPM
      #   if: success()
      #   run: |
      #     pnpm publish --access public --no-git-checks
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 5: Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [github-release]
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate documentation
        run: |
          if [ -f "scripts/generate-docs.js" ]; then
            node scripts/generate-docs.js
          fi

      - name: Update version in docs
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Updating documentation for version $VERSION"
          
          # Update version references in documentation
          find docs -name "*.md" -exec sed -i "s/@latest/@$VERSION/g" {} \;
          find docs -name "*.md" -exec sed -i "s/version: .*/version: $VERSION/g" {} \;

      - name: Commit documentation updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add docs/
            git commit -m "docs: update documentation for ${GITHUB_REF#refs/tags/}"
            git push origin main
          else
            echo "No documentation changes to commit"
          fi

  # Job 6: Notify on Success
  notify:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [github-release]
    if: always() && needs.github-release.result == 'success'

    steps:
      - name: Get release info
        id: release
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${{ needs.create-release.outputs.new_tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Create success comment
        uses: actions/github-script@v7
        with:
          script: |
            const { tag_name } = process.env;
            console.log(`🎉 Release ${process.env.tag_name} created successfully!`);
            
            // If this was triggered by a PR, comment on it
            if (context.payload.pull_request) {
              github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🎉 **Release ${process.env.tag_name} Published!**
                
                Your changes have been successfully released!
                
                **Download:** https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${process.env.tag_name}
                
                Thank you for contributing! 🚀`
              });
            }
        env:
          tag_name: ${{ steps.release.outputs.tag_name }}